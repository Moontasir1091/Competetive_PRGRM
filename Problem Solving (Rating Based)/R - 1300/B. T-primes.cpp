#include <bits/stdc++.h>
using namespace std;

const int N = 1e7 + 10;  // 1e7 + 10 ржкрж░рзНржпржирзНржд ржкрзНрж░рж╛ржЗржо ржмрзЗрж░ ржХрж░ржмрзЛ
vector<bool> is_prime(N, 1);
unordered_set<long long> t_primes;

void sieve_Algo_First_time() {
    is_prime[0] = is_prime[1] = false; // 0 ржПржмржВ 1 ржкрзНрж░рж╛ржЗржо ржирж╛
    for (long long i = 2; i * i <= N; ++i) {
        if (is_prime[i]) {
            for (long long j = i * i; j <= N; j += i)
                is_prime[j] = false;
        }
    }
    
    // ржкрзНрж░рж╛ржЗржо рж╕ржВржЦрзНржпрж╛ ржЧрзБрж▓рзЛрж░ ржмрж░рзНржЧ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
    for (long long i = 2; i <= N; ++i) {
        if (is_prime[i]) {
            t_primes.insert(i * i);  // ржкрзНрж░рж╛ржЗржо ржирж╛ржорзНржмрж╛рж░рзЗрж░ рж╕рзНржХрзЯрж╛рж░
        }
    }
}

int main() {
    sieve_Algo_First_time(); // Sieve рж░рж╛ржи ржХрж░ржмрзЛ ржПржХржмрж╛рж░
    int n;
    cin >> n;
    
    while (n--) {
        long long x;
        cin >> x;
        if (t_primes.count(x))
            cout << "YES\n";
        else
            cout << "NO\n";
    }
    
    return 0;
}

/*ржЖржорж╛ржжрзЗрж░ ржПржоржи рж╕ржВржЦрзНржпрж╛ ржЦрзБржБржЬрждрзЗ рж╣ржмрзЗ ржпрж╛ ржарж┐ржХ рждрж┐ржиржЯрж┐ ржнрж┐ржирзНржи ржкржЬрж┐ржЯрж┐ржн ржмрж┐ржнрж╛ржЬржХ (divisors) рж░рж╛ржЦрзЗред

ржЖржорж░рж╛ ржЬрж╛ржирж┐,

ржПржХржЯрж┐ ржкрзНрж░рж╛ржЗржо рж╕ржВржЦрзНржпрж╛ 
ЁЭСЭ
p ржПрж░ ржарж┐ржХ ржжрзБржЯрж┐ ржмрж┐ржнрж╛ржЬржХ ржерж╛ржХрзЗ: 
1
1 ржПржмржВ 
ЁЭСЭ
pред
ЁЭСЭ
2
p 
2
  (ржпрзЗржЦрж╛ржирзЗ 
ЁЭСЭ
p ржПржХржЯрж┐ ржкрзНрж░рж╛ржЗржо рж╕ржВржЦрзНржпрж╛) ржПрж░ ржарж┐ржХ рждрж┐ржиржЯрж┐ ржмрж┐ржнрж╛ржЬржХ ржерж╛ржХрзЗ:
1
1
ЁЭСЭ
p
ЁЭСЭ
2
p 
2
 
рждрж╛ржЗ, ржПржХржЯрж┐ T-Prime рж╕ржВржЦрзНржпрж╛ ржЕржмрж╢рзНржпржЗ ржХрзЛржирзЛ ржкрзНрж░рж╛ржЗржо рж╕ржВржЦрзНржпрж╛рж░ ржмрж░рзНржЧ (square of a prime number) рж╣рждрзЗ рж╣ржмрзЗред*/