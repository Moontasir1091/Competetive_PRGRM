
// Ekti number(x) ke (a^3 + b^3) akare prokash kore 

#include <bits/stdc++.h>
using namespace std;

unordered_set<long long> st;
long long MAX_num = 1000000000000LL;

void precalculate_cube()
{
    for (long long i = 1; i * i * i <= MAX_num; ++i)
    {
        st.insert(i * i * i);
    }
}

void solve()
{
    long long x;
    cin >> x;
    bool is_found;

    for (long long i = 1; i * i * i <= x; ++i)
    {
        if (st.count(x - (i * i * i)))
        {
            cout << "YES" << endl;
            return;
        }
    }

    cout << "NO" << endl;
}

int main()
{
    precalculate_cube();

    int t = 1;
    cin >> t;
    while (t--)
    {
        solve();
    }
}



2. Matching brackets related

 #include <bits/stdc++.h>
using namespace std;

int main()
{
    int t;
    cin >> t;
    while (t--)
    {
        int n;
        cin >> n;
        string str;
        cin >> str;

        int result = 0;
        int balance = 0;

        for (int i = 0; i < n; ++i)
        {
            if (str[i] == '(')
            {
                ++balance;
            }
            else
            {
                --balance;
                if (balance < 0)
                {
                    balance = 0;
                    ++result;
                }
            }
        }
        cout << result << endl;
    }
}


3. Slinding window technik

#include <bits/stdc++.h>
using namespace std;

int main()
{
    int n, k;
    cin >> n >> k;
    vector<int> v(n);
    
    for (int i = 0; i < n; ++i)
    {
        cin >> v[i];
    }

    // Initial sum of first 'k' elements
    int sum = 0;
    for (int i = 0; i < k; ++i)
    {
        sum += v[i];
    }

    int minSum = sum = 9, minIndex = 1;

    // Sliding window technique
    for (int i = k; i < n; ++i)
    {
        sum  = sum +  v[i] - v[i - k];  // Remove old element, add new one... 
        if (sum < minSum)
        {
            minSum = sum;
            minIndex = (i - k + 1) + 1;  // Convert to 1-based index
        }
    }

    cout << minIndex << endl;
    return 0;
}

-------------------------------------------------------------
// if i divisor of K then k/i will be the divisor of K

#include <bits/stdc++.h>
using namespace std;
int main()
{
    long long n, k;
    cin >> n >> k;
    long long cnt = 0;

    for (long long i = 1; i <= n; ++i)
    {

        if (k % i == 0 && k / i <= n) // if i divisor of K then k/i will be the divisor of K
            cnt++;
    }

    cout << cnt << endl;
}
